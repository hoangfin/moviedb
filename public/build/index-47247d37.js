
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as validate_slots, e as element, f as attr_dev, h as add_location, j as insert_dev, k as append_dev, n as noop, o as detach_dev } from './main-ff8789af.js';

let apiKey = "7b702eb6a197032e084d65bbe032f05a";

async function getPopularMovies() {
    const page = Math.floor(Math.random() * 10) + 1;
    const url = `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=en-US&page=${page}`;
    try {
        const res = await fetch(url);
        if (res.ok) {
            const data = await res.json();
            return data.results;
        }
        throw new Error(res.status);
    } catch (error) {
        console.error(error);
    }
}
async function getMovieDetail(movieID) {
    try {
        const res = await fetch(`https://api.themoviedb.org/3/movie/${movieID}?api_key=${apiKey}&language=en-US`);
        if (res.ok) {
            return await res.json();
        }
    } catch (error) {
        console.error(error);
    }
}
async function searchMovies(keyword) {
    try {
        const res = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${keyword}&page=1&include_adult=false`);
        if (res.ok) {
            const data = await res.json();
            return data.results;
        }
    } catch (error) {
        console.error(error);
    }
}

/* src\components\Preloader.svelte generated by Svelte v3.46.4 */

const file = "src\\components\\Preloader.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			attr_dev(div0, "class", "content svelte-v5ifed");
			add_location(div0, file, 1, 4, 29);
			attr_dev(div1, "class", "preloader svelte-v5ifed");
			add_location(div1, file, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Preloader', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Preloader> was created with unknown prop '${key}'`);
	});

	return [];
}

class Preloader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Preloader",
			options,
			id: create_fragment.name
		});
	}
}

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}

export { Preloader as P, getMovieDetail as a, fly as f, getPopularMovies as g, searchMovies as s };
//# sourceMappingURL=index-47247d37.js.map
