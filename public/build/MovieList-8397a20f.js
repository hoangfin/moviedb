
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, a as validate_slots, e as element, b as space, F as svg_element, G as text, H as src_url_equal, f as attr_dev, h as add_location, j as insert_dev, k as append_dev, I as set_data_dev, n as noop, o as detach_dev, J as validate_each_argument, u as create_component, w as mount_component, z as transition_in, x as transition_out, A as destroy_component, B as group_outros, y as check_outros, K as destroy_each } from './main-ff8789af.js';

/* src\components\MovieCard.svelte generated by Svelte v3.46.4 */

const file$1 = "src\\components\\MovieCard.svelte";

function create_fragment$1(ctx) {
	let div2;
	let a;
	let img;
	let img_src_value;
	let img_alt_value;
	let a_href_value;
	let t0;
	let div1;
	let div0;
	let svg;
	let path;
	let t1;
	let span;
	let t2_value = /*movie*/ ctx[0].vote_average + "";
	let t2;
	let t3;
	let h2;
	let t4_value = /*movie*/ ctx[0].title + "";
	let t4;
	let t5;
	let p;
	let t6_value = /*movie*/ ctx[0].release_date + "";
	let t6;

	const block = {
		c: function create() {
			div2 = element("div");
			a = element("a");
			img = element("img");
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t1 = space();
			span = element("span");
			t2 = text(t2_value);
			t3 = space();
			h2 = element("h2");
			t4 = text(t4_value);
			t5 = space();
			p = element("p");
			t6 = text(t6_value);
			if (!src_url_equal(img.src, img_src_value = `https://image.tmdb.org/t/p/w500${/*movie*/ ctx[0].poster_path}`)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*movie*/ ctx[0].title);
			attr_dev(img, "class", "svelte-1igjxcf");
			add_location(img, file$1, 6, 8, 117);
			attr_dev(a, "href", a_href_value = `/movie/${/*movie*/ ctx[0].id}`);
			attr_dev(a, "class", "svelte-1igjxcf");
			add_location(a, file$1, 5, 4, 76);
			attr_dev(path, "d", "M12 17.27l4.15 2.51c.76.46 1.69-.22 1.49-1.08l-1.1-4.72 3.67-3.18c.67-.58.31-1.68-.57-1.75l-4.83-.41-1.89-4.46c-.34-.81-1.5-.81-1.84 0L9.19 8.63l-4.83.41c-.88.07-1.24 1.17-.57 1.75l3.67 3.18-1.1 4.72c-.2.86.73 1.54 1.49 1.08l4.15-2.5z");
			add_location(path, file$1, 11, 16, 380);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "class", "rating-star svelte-1igjxcf");
			attr_dev(svg, "role", "presentation");
			add_location(svg, file$1, 10, 12, 282);
			attr_dev(span, "class", "rating-score svelte-1igjxcf");
			add_location(span, file$1, 13, 12, 666);
			attr_dev(div0, "class", "rating svelte-1igjxcf");
			add_location(div0, file$1, 9, 8, 248);
			attr_dev(h2, "class", "svelte-1igjxcf");
			add_location(h2, file$1, 15, 8, 746);
			attr_dev(p, "class", "svelte-1igjxcf");
			add_location(p, file$1, 16, 8, 778);
			attr_dev(div1, "class", "detail svelte-1igjxcf");
			add_location(div1, file$1, 8, 4, 218);
			attr_dev(div2, "class", "movie-card svelte-1igjxcf");
			add_location(div2, file$1, 4, 0, 46);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, a);
			append_dev(a, img);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, svg);
			append_dev(svg, path);
			append_dev(div0, t1);
			append_dev(div0, span);
			append_dev(span, t2);
			append_dev(div1, t3);
			append_dev(div1, h2);
			append_dev(h2, t4);
			append_dev(div1, t5);
			append_dev(div1, p);
			append_dev(p, t6);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*movie*/ 1 && !src_url_equal(img.src, img_src_value = `https://image.tmdb.org/t/p/w500${/*movie*/ ctx[0].poster_path}`)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*movie*/ 1 && img_alt_value !== (img_alt_value = /*movie*/ ctx[0].title)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*movie*/ 1 && a_href_value !== (a_href_value = `/movie/${/*movie*/ ctx[0].id}`)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*movie*/ 1 && t2_value !== (t2_value = /*movie*/ ctx[0].vote_average + "")) set_data_dev(t2, t2_value);
			if (dirty & /*movie*/ 1 && t4_value !== (t4_value = /*movie*/ ctx[0].title + "")) set_data_dev(t4, t4_value);
			if (dirty & /*movie*/ 1 && t6_value !== (t6_value = /*movie*/ ctx[0].release_date + "")) set_data_dev(t6, t6_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('MovieCard', slots, []);
	let { movie } = $$props;
	const writable_props = ['movie'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MovieCard> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('movie' in $$props) $$invalidate(0, movie = $$props.movie);
	};

	$$self.$capture_state = () => ({ movie });

	$$self.$inject_state = $$props => {
		if ('movie' in $$props) $$invalidate(0, movie = $$props.movie);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [movie];
}

class MovieCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { movie: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MovieCard",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*movie*/ ctx[0] === undefined && !('movie' in props)) {
			console.warn("<MovieCard> was created without expected prop 'movie'");
		}
	}

	get movie() {
		throw new Error("<MovieCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set movie(value) {
		throw new Error("<MovieCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\MovieList.svelte generated by Svelte v3.46.4 */
const file = "src\\components\\MovieList.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (7:4) {#each movies as movie}
function create_each_block(ctx) {
	let li;
	let moviecard;
	let current;

	moviecard = new MovieCard({
			props: { movie: /*movie*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			li = element("li");
			create_component(moviecard.$$.fragment);
			add_location(li, file, 7, 8, 139);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			mount_component(moviecard, li, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const moviecard_changes = {};
			if (dirty & /*movies*/ 1) moviecard_changes.movie = /*movie*/ ctx[1];
			moviecard.$set(moviecard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(moviecard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(moviecard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(moviecard);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(7:4) {#each movies as movie}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let ul;
	let current;
	let each_value = /*movies*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(ul, "class", "svelte-iyeimn");
			add_location(ul, file, 5, 0, 96);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*movies*/ 1) {
				each_value = /*movies*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('MovieList', slots, []);
	let { movies } = $$props;
	const writable_props = ['movies'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MovieList> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('movies' in $$props) $$invalidate(0, movies = $$props.movies);
	};

	$$self.$capture_state = () => ({ MovieCard, movies });

	$$self.$inject_state = $$props => {
		if ('movies' in $$props) $$invalidate(0, movies = $$props.movies);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [movies];
}

class MovieList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { movies: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MovieList",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*movies*/ ctx[0] === undefined && !('movies' in props)) {
			console.warn("<MovieList> was created without expected prop 'movies'");
		}
	}

	get movies() {
		throw new Error("<MovieList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set movies(value) {
		throw new Error("<MovieList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { MovieList as M };
//# sourceMappingURL=MovieList-8397a20f.js.map
